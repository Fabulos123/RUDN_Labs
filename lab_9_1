#include <stdio.h>

typedef struct {
    double x;
    double y;
} Point;

typedef struct {
    Point center;
    double radius;
} Circle;

int isCollinear(Point p1, Point p2, Point p3) {
    // Проверка коллинеарности с помощью площади треугольника
    return (p1.x * (p2.y - p3.y) + 
            p2.x * (p3.y - p1.y) + 
            p3.x * (p1.y - p2.y)) == 0;
}

Circle findCircle(Point p1, Point p2, Point p3) {
    Circle circle;
    double A = p1.x * (p2.y - p3.y) - p1.y * (p2.x - p3.x) + 
               p2.x * p3.y - p3.x * p2.y;
    
    if (A == 0) {
        printf("Точки коллинеарны. Невозможно определить окружность.\n");
        circle.radius = -1; // Указываем, что вычисление невозможно
        return circle;
    }
    
    double B = (p1.x * p1.x + p1.y * p1.y) * (p2.y - p3.y) +
               (p2.x * p2.x + p2.y * p2.y) * (p3.y - p1.y) +
               (p3.x * p3.x + p3.y * p3.y) * (p1.y - p2.y);
    
    double C = (p1.x * p1.x + p1.y * p1.y) * (p3.x - p2.x) +
               (p2.x * p2.x + p2.y * p2.y) * (p1.x - p3.x) +
               (p3.x * p3.x + p3.y * p3.y) * (p2.x - p1.x);
    
    double D = (p1.x * p1.x + p1.y * p1.y) * (p2.x * p3.y - p3.x * p2.y) +
               (p2.x * p2.x + p2.y * p2.y) * (p3.x * p1.y - p1.x * p3.y) +
               (p3.x * p3.x + p3.y * p3.y) * (p1.x * p2.y - p2.x * p1.y);
    
    circle.center.x = -B / (2 * A);
    circle.center.y = -C / (2 * A);
    circle.radius = sqrt((B * B + C * C - 4 * A * D)) / (2 * fabs(A));
    
    return circle;
}

int main() {
    Point p1, p2, p3;
    
    printf("Введите координаты первой точки (x1 y1): ");
    scanf("%lf %lf", &p1.x, &p1.y);
    
    printf("Введите координаты второй точки (x2 y2): ");
    scanf("%lf %lf", &p2.x, &p2.y);
    
    printf("Введите координаты третьей точки (x3 y3): ");
    scanf("%lf %lf", &p3.x, &p3.y);
    
    Circle circle = findCircle(p1, p2, p3);
    
    if (circle.radius != -1) {
        printf("Центр окружности: (%.2f, %.2f)\n", circle.center.x, circle.center.y);
        printf("Радиус окружности: %.2f\n", circle.radius);
    }
    
    return 0;
}
